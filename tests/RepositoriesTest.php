<?php
/**
 * Copyright (c) 2016. Maksim Babenko <mb.babenoff@yandex.ru>
 */

namespace Test;


use LD2\Exception\RepositoryException;
use LD2\Repository\IHeroRepository;
use LD2\Repository\ILocationRepository;
use LD2\Repository\IUserRepository;
use LD2\Repository\UserRepository;
use PHPUnit\Framework\TestCase;

class HeroRepositoryTest extends TestCase
{
    /**
     * @var IHeroRepository
     */
    protected $heroRepo;
    /**
     * @var IUserRepository
     */
    protected $userRepo;
    /**
     * @var ILocationRepository
     */
    protected $locRepo;

    protected $testLoc = [
        "location_id" => "test_28x36",
        "title" => "Test loc",
        "description" => "This is test locarion",
        "terr" => 1,
        "doors" => "nord|test_28_35"
    ];

    protected $testUser = [
        "username" => "tester",
        "email" => "tester@example.com",
        "password" => "123123",
        "role" => UserRepository::ADMIN
    ];

    protected $testHero = [
        "username" => "tester",
        "title" => "testHero228",
        "location_id" => "test_28x36"
    ];

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $container = new \Symfony\Component\DependencyInjection\ContainerBuilder();
        $locator = new \Symfony\Component\Config\FileLocator(ROOT."/config");
        $loader = new \Symfony\Component\DependencyInjection\Loader\YamlFileLoader($container, $locator);
        $loader->load("container.yml");
        $container->compile();
        $this->heroRepo = $container->get("hero_repository");
        $this->userRepo = $container->get("user_repository");
        $this->locRepo = $container->get("locations_repository");
    }

    public function testCreate(){
        $this->assertTrue($this->locRepo->create($this->testLoc));
        $this->assertTrue($this->userRepo->create($this->testUser));
        $this->assertTrue($this->heroRepo->create($this->testHero));
    }
    /**
     * @depends testCreate
     */
    public function testSelect(){
        $location = $this->locRepo->findByLocationId($this->testLoc["location_id"]);
        $this->assertTrue(is_array($location), "locations must be array");
        $this->testLoc = $location;
        $user = $this->userRepo->findByUsername($this->testUser["username"]);
        $this->assertTrue(is_array($user), "the result should be an array");
        unset($user);
        $user = $this->userRepo->findByEmail($this->testUser["email"]);
        $this->assertTrue(is_array($user), "the result should be an array");
        $this->testUser = $user;
        $hero = $this->heroRepo->getHeroByTitle($this->testHero["title"]);
        $this->assertTrue(is_array($hero));
        $testHero2 = $this->testHero;
        $testHero2["title"] = "tester229";
        $this->heroRepo->create($testHero2);
        $hero2 = $this->heroRepo->getHeroByTitle($testHero2["title"]);
        $this->assertTrue(is_array($hero2));
        $heroes = $this->heroRepo->getHeroesByUsername($this->testHero["username"]);
        $this->assertCount(2, $heroes);
        return [$location, $user, $hero];
    }

    /**
     * @depends testSelect
     * @param array $data
     * @return array
     */
    public function testUpdate(array $data){
        list($location, $user, $hero) = $data;
        $location["location_id"] = "test_56x48";
        $this->assertTrue($this->locRepo->update($location));

        $this->assertCount(2, $this->heroRepo->getHeroByLocationId($location["location_id"]), 'heroes must be 2 after update location_id');

        $hero["title"] = "babenoff";
        unset($hero["location_id"]);
        $this->assertTrue($this->heroRepo->update($hero));

        $user["username"] = "tester54";
        $this->assertTrue($this->userRepo->update($user));
        $this->assertCount(2, $this->heroRepo->getHeroesByUsername($user["username"]), 'heroes must be 2 after update username');
        return [$location, $user, $hero];
    }
    /**
     * @depends testUpdate
     */
    public function testRemove(array $data){
        list($location, $user, $hero) = $data;
        $this->assertTrue($this->locRepo->remove($location));
        $this->assertCount(0, $this->heroRepo->getHeroByLocationId($location["location_id"]));
        $this->assertTrue($this->heroRepo->remove($hero));
        $this->assertTrue($this->userRepo->remove($user));
        try{
            $this->assertCount(0, $this->heroRepo->getHeroesByUsername($user["username"]));
        }catch (RepositoryException $e){
            $this->fail("not all the characters removed");
        }
    }
}
