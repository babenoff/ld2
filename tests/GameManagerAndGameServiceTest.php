<?php
/**
 * Copyright (c) 2016. Maksim Babenko <mb.babenoff@yandex.ru>
 */

namespace Test;


use LD2\Manager\GameManager;
use LD2\Service\IGameService;

class GameManagerAndGameService extends AbstractContainer
{
    /**
     * @var GameManager
     */
    protected $gameManager;
    /**
     * @var IGameService
     */
    protected $gameService;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->gameManager = $this->getContainer()->get("ld2.game_manager");
        $this->gameService = $this->getContainer()->get("ld2.game_service");
    }

    public function testGetNeigboringLocIds(){
        $locId = "test_21x48";
        /** @var IGameService $gameService */
        $gameService = $this->getGameService();
        $locIds = $gameService->getNeighboringLocsIds($locId);
        $this->assertTrue(is_array($locIds));
        $this->assertFalse(in_array($locId, $locIds));
        $this->assertTrue(in_array("test_20x48", $locIds));
    }

    public function testCheckLocId(){
        $this->assertTrue($this->getGameManager()->checkLocId("test_0x1"));
        $this->assertFalse($this->getGameManager()->checkLocId("test_Ox1"));
        $this->assertFalse($this->getGameManager()->checkLocId("Test_0x1"));
        $this->assertTrue($this->getGameManager()->checkLocId("test1_0x1"));
        $this->assertFalse($this->getGameManager()->checkLocId("test_0_1"));
    }

    /**
     * @return GameManager
     */
    public function getGameManager(): GameManager
    {
        return $this->gameManager;
    }

    /**
     * @return IGameService
     */
    public function getGameService(): IGameService
    {
        return $this->gameService;
    }
}
